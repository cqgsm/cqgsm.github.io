<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[正则学习]]></title>
      <url>http://cqblog.info/2016/07/25/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>正则：计算机能读懂的规则<br>做个简单的记录，详细看<a href="http://deerchao.net/tutorials/regex/regex.htm#lookaround" target="_blank" rel="external">正则30分钟</a><br><a id="more"></a><br>找出字符串中的数字<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">1.传统方法</div><div class="line">var str = <span class="string">'sdjflsjdlf23432jljsdljflsdj230234'</span>;</div><div class="line">var arr = [];</div><div class="line"><span class="keyword">for</span>(var i = 0; i &lt; str.length; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(str.charAt(i)&lt;=<span class="string">'9'</span>&amp;&amp;str.charAt(i)&gt;=<span class="string">'0'</span>)&#123;</div><div class="line">        arr.push[str.charAt(i)];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">就找到了数字</div><div class="line"></div><div class="line">2.正则的方式</div><div class="line">str.match(/\d+/g); 就能得到结果</div><div class="line">用正则真是so easy啊</div></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">写法</div><div class="line">var re = /a/</div><div class="line">或者</div><div class="line">var re = new RegExp(<span class="string">'a'</span>);</div></pre></td></tr></table></figure>
<p>#转义字符和其他<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">\s --&gt; 空格</div><div class="line">\S --&gt; 非空格</div><div class="line">\d --&gt; 数字</div><div class="line">\D --&gt; 非数字</div><div class="line">\w --&gt; 字符 （包括三类：字母，数字，下划线_）</div><div class="line">\W --&gt; 非数字</div><div class="line">. --&gt; 代表任意字符</div><div class="line">\. --&gt; 真正的.</div><div class="line">\b --&gt; 独立的部分 （起始，结束，空格）</div><div class="line">\B --&gt; 非独立的部分</div><div class="line">\1 --&gt; 重复的子项</div><div class="line">i --&gt; 忽略大小写</div><div class="line">g --&gt; 全局搜索</div><div class="line">+ --&gt; 至少出现一次</div><div class="line">| --&gt; 或者的意思  re = /sdf|sdf|sdf/</div><div class="line">() --&gt; 匹配子项（分组操作）</div><div class="line">[] --&gt; 整体代表一个字符[abc],取出一个与其他匹配</div><div class="line">^ --&gt; 如果卸载[]里面，代表排除的意思，否则代表开头</div><div class="line">$ --&gt; 在最后，代表结束位置</div><div class="line">[a-z0-9A-Z] --&gt; 表示范围，中括号里面都代表一位</div><div class="line">[\w\W] --&gt; 代表所有</div><div class="line">&#123;4,7&#125; --&gt; 最少出现4次，最多出现7次</div><div class="line">? --&gt; 出现0次或者1次</div><div class="line">* --&gt; 至少出现0次</div></pre></td></tr></table></figure></p>
<p>#正则方法<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">1.test</div><div class="line">  字符串判断</div><div class="line">    --返回真假</div><div class="line">    --正则.test(字符串)</div><div class="line">    eg: var str = <span class="string">'asd'</span>;</div><div class="line">        var re = /a/;</div><div class="line">        alert(re.test(str)) //<span class="literal">true</span></div><div class="line"></div><div class="line">2.search</div><div class="line">  字符串搜索</div><div class="line">  --返回字符串出现的位置，失败返回-1</div><div class="line">  --字符串.search(正则)</div><div class="line">  --忽略大小写：i--ignore     </div><div class="line">  eg: var str = <span class="string">'asd'</span>;</div><div class="line">      var re = /A/i; 或者 var re = new RegExp(<span class="string">'B'</span>,<span class="string">'i'</span>);</div><div class="line">      alert(str.search(re)) //0</div><div class="line"></div><div class="line">3.match</div><div class="line">  正则去匹配字符串，如果匹配成功，就返回匹配成功的数组，不成功就返回null   </div><div class="line">  不加g才能获取到子项的集合 /(a)(b)(c)/</div><div class="line">  eg: var str = <span class="string">'sdfsdlfl234ljlj23l4jl23jl'</span>;</div><div class="line">      var re = /\d/g;</div><div class="line">      alert(str.match(re));//[<span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]  </div><div class="line"></div><div class="line">      var re = /\d+/g;</div><div class="line">      alert(str.match(re));//[<span class="string">"234"</span>, <span class="string">"23"</span>, <span class="string">"4"</span>, <span class="string">"23"</span>]</div><div class="line"></div><div class="line">4.replace</div><div class="line">  正则匹配字符串，匹配成功的字符串去替换成新的字符串</div><div class="line">  用法：str.replace(re,<span class="string">'b'</span>); </div><div class="line">  注意：第二个参数可以是回掉函数 </div><div class="line">        <span class="keyword">function</span>(str)&#123;&#125;//第一个参数就是匹配成功的字符</div><div class="line">  eg: var str = <span class="string">'aaa'</span>;</div><div class="line">      var re = /a/;</div><div class="line">      str = str.replace(re,<span class="string">'b'</span>); //<span class="string">"baa"</span>     </div><div class="line">    分组操作</div><div class="line">    var str = <span class="string">'2016-7-13'</span>;</div><div class="line">    var re = /(\d+)(-)/g;</div><div class="line">    str.replace(re,<span class="keyword">function</span>(<span class="variable">$0</span>,<span class="variable">$1</span>,<span class="variable">$2</span>)&#123;</div><div class="line">        //<span class="variable">$0</span>就是str</div><div class="line">        //<span class="variable">$1</span> (第一个(\d+)匹配到的内容)</div><div class="line">        //<span class="variable">$2</span> (第二个(-)匹配到的内容)</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mongodb]]></title>
      <url>http://cqblog.info/2016/07/14/mongodb/</url>
      <content type="html"><![CDATA[<p>近期学习nodejs做了一个小demo，登录注册，上传图片并且裁剪，发表文章。<br>使用了mongodb，做了一个简单的封装，本来想做互相评论回复，但是发现，使用自己封装的简易DAO层，很难实现，集合与集合之间的关系很难处理，下一步学习mongoose.重构整个功能。<br>还是记录下这个简易的封装<br><a id="more"></a></p>
<p>#1. 连接数据库<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> _connectDB(callback) &#123;</div><div class="line">    var url = settings.dburl;</div><div class="line">    MongoClient.connect(url, <span class="keyword">function</span> (err, db) &#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            throw Error(err);</div><div class="line">        &#125;</div><div class="line">        callback(db);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#2. 插入一条数据<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">exports.insertOne = <span class="keyword">function</span> (collectionName, json, callback) &#123;</div><div class="line">    _connectDB(<span class="keyword">function</span> (db) &#123;</div><div class="line">        db.collection(collectionName).insertOne(json, <span class="keyword">function</span> (err, result) &#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">                db.close();</div><div class="line">                <span class="built_in">return</span> callback(err, null);</div><div class="line">            &#125;</div><div class="line">            callback(null, result);</div><div class="line">            db.close();</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>#3. 分页查询<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">exports.find = <span class="keyword">function</span> (collectionName, json, opts, cb) &#123;</div><div class="line">    <span class="keyword">if</span> (arguments.length === 3) &#123;</div><div class="line">        //不传入args，就是不分页</div><div class="line">        var callback = opts;</div><div class="line">        var args = &#123;<span class="string">'itemCount'</span>: 0, <span class="string">'page'</span>: 0&#125;;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arguments.length === 4) &#123;</div><div class="line">        //分页</div><div class="line">        var args = opts;</div><div class="line">        var callback = cb;</div><div class="line">        //排序</div><div class="line">        var sort = args.sort || &#123;&#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        throw new Error(<span class="string">'要3或者4个参数'</span>);</div><div class="line">    &#125;</div><div class="line">    //跳过的条目</div><div class="line">    var skipnumber = args.itemCount * args.page;</div><div class="line">    //每次取几条</div><div class="line">    var <span class="built_in">limit</span> = args.itemCount;</div><div class="line">    _connectDB(<span class="keyword">function</span> (db) &#123;</div><div class="line">        db.collection(collectionName).find(json).limit(<span class="built_in">limit</span>).skip(skipnumber).sort(sort).toArray(<span class="keyword">function</span> (err, doc) &#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">                db.close();</div><div class="line">                <span class="built_in">return</span> callback(err, null);</div><div class="line">            &#125;</div><div class="line">            callback(null, doc);</div><div class="line">            db.close();</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>#4. 删除数据<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">exports.delete = <span class="keyword">function</span> (collectionName, json, callback) &#123;</div><div class="line">    _connectDB(<span class="keyword">function</span> (db) &#123;</div><div class="line">        db.collection(collectionName).deleteMany(json, <span class="keyword">function</span> (err, result) &#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">                db.close();</div><div class="line">                callback(err, null);</div><div class="line">            &#125;</div><div class="line">            callback(null, result);</div><div class="line">            db.close();</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>#5. 更新数据<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">exports.updataMany = <span class="keyword">function</span> (collectionName, json1, json2, callback) &#123;</div><div class="line">    _connectDB(<span class="keyword">function</span> (db) &#123;</div><div class="line">        db.collection(collectionName).updateMany(</div><div class="line">            json1,</div><div class="line">            json2,</div><div class="line">            <span class="keyword">function</span> (err, result) &#123;</div><div class="line">                <span class="keyword">if</span> (err) &#123;</div><div class="line">                    callback(err, null);</div><div class="line">                    db.close();</div><div class="line">                &#125;</div><div class="line">                callback(null, result);</div><div class="line">                db.close();</div><div class="line">            &#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>#6. 统计集合文档个数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//得到文件个数，前端分页用</div><div class="line">exports.getAllCount = <span class="keyword">function</span> (collectName,callback) &#123;</div><div class="line">    _connectDB(<span class="keyword">function</span> (db) &#123;</div><div class="line">        db.collection(collectName).count(&#123;&#125;).then(<span class="keyword">function</span>(count)&#123;</div><div class="line">            callback(count);</div><div class="line">            db.close();</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>进军mongoose~~~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript简单继承]]></title>
      <url>http://cqblog.info/2016/07/02/javascript%E7%AE%80%E5%8D%95%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p>面向对象中少不了继承，js继承方式多种多样，各有优劣，今天来分析使用下John Resig大神的Simple JavaScript Inheritance<br><a id="more"></a><br>代码不多，但是很巧妙，非常值得学习</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">    /* Simple JavaScript Inheritance</div><div class="line">     * By John Resig http://ejohn.org/</div><div class="line">     * MIT Licensed.</div><div class="line">     * Inspired by base2 and Prototype</div><div class="line">     */</div><div class="line">(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    //initializing 用来控制init是在 new Class()的时候触发</div><div class="line">    // /xyz/.test(<span class="function"><span class="title">function</span></span>() &#123;xyz;&#125;)用来判定函数的toString是否能暴露里面的实现，也就是把函数变成一个字符串，现代浏览器基本都能正确显示</div><div class="line">    //返回 `_super_` 下面会做判断用</div><div class="line">    var initializing = <span class="literal">false</span>,</div><div class="line">        fnTest = /xyz/.test(<span class="function"><span class="title">function</span></span>() &#123;xyz;&#125;) ? /\b_super\b/ : /.*/;</div><div class="line">    //this是window,暴露到全局，这个是基类</div><div class="line">    this.Class = <span class="function"><span class="title">function</span></span>() &#123;&#125;;</div><div class="line">    Class.extend = <span class="keyword">function</span>(prop) &#123;</div><div class="line">        //保存父类的原型对象到`_super`</div><div class="line">        var _super = this.prototype;</div><div class="line">        //<span class="literal">true</span> 阻止了new this()的时候，立马执行类的init函数</div><div class="line">        initializing = <span class="literal">true</span>;</div><div class="line">        //变量prototype保存了父类的`实例化对象`</div><div class="line">        // prototype 继承 _super</div><div class="line">        var prototype = new this(); </div><div class="line">        initializing = <span class="literal">false</span>;</div><div class="line">        //复制属性</div><div class="line">        <span class="keyword">for</span> (var name <span class="keyword">in</span> prop) &#123;</div><div class="line">            //传进来的对象遍历，赋给`prototype`这个对象</div><div class="line">            //这段就是为了判断传进来的是函数，而且父类的原型对象里面也有这个函数，并且传进来的函数里面有`_super`,那么就做一些小操作，this._super 指向父类原型对象中的同名方法</div><div class="line">            prototype[name] = typeof prop[name] == <span class="string">"function"</span> &amp;&amp;</div><div class="line">                typeof _super[name] == <span class="string">"function"</span> &amp;&amp; fnTest.test(prop[name]) ?</div><div class="line">                (<span class="keyword">function</span>(name, fn) &#123;</div><div class="line">                    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">                        var tmp = this._super;</div><div class="line">                        this._super = _super[name];</div><div class="line">                        var ret = fn.apply(this, arguments);</div><div class="line">                        this._super = tmp;</div><div class="line">                        <span class="built_in">return</span> ret;</div><div class="line">                    &#125;;</div><div class="line">                &#125;)(name, prop[name]) : prop[name];</div><div class="line">        &#125;</div><div class="line">        //这是一个 局部函数，弄了个跟全局Class一样的名字，这个不影响，完全可以换一个函数名字</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">Class</span></span>() &#123;</div><div class="line">            //执行初始化函数，这里就用到了上面的initializing开关</div><div class="line">            <span class="keyword">if</span> (!initializing &amp;&amp; this.init)</div><div class="line">                this.init.apply(this, arguments);</div><div class="line">        &#125;</div><div class="line">        //var prototype = new this();上面的遍历扩充了方法</div><div class="line">        Class.prototype = prototype;</div><div class="line">        Class.prototype.constructor = Class;</div><div class="line">        //arguments.callee 代表当前执行的函数，也就是Class.extend(这个是全局的Class)</div><div class="line">        //保证能顺序继承下去</div><div class="line">        Class.extend = arguments.callee;</div><div class="line">        <span class="built_in">return</span> Class;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">总结下：所有实现都在构造函数的prototype对象中</div><div class="line">//   `---&gt;`表示继承</div><div class="line">继承顺序：class(局部函数).prototype ---&gt;  prototype(该对象为new this(),也就是父类的实例,并且添加了子类自己的方法)---&gt; 继承了 父类.prototype</div><div class="line">最后<span class="built_in">return</span> 出去了 class(局部函数);</div><div class="line">使用方法：</div><div class="line">    var Person = Class.extend(&#123;</div><div class="line">            init: <span class="keyword">function</span>(name) &#123;</div><div class="line">                this.name = name;</div><div class="line">            &#125;,</div><div class="line">            getName: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">                <span class="built_in">return</span> this.name;</div><div class="line">            &#125;,</div><div class="line">            oo:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                alert(1)</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        // Employee类从Person类继承</div><div class="line">        var Employee = Person.extend(&#123;</div><div class="line">            init: <span class="keyword">function</span>(name, id) &#123;</div><div class="line">                this._super(name);</div><div class="line">                this.id = id;</div><div class="line">                this.arr = [1,3];</div><div class="line">            &#125;,</div><div class="line">            getEmployeeID: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">                <span class="built_in">return</span> this.x;</div><div class="line">            &#125;,</div><div class="line">            getName: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">                //  调用父类的方法</div><div class="line">                <span class="built_in">return</span> <span class="string">"Employee name: "</span> + this.name;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        var zhang = new Employee(<span class="string">"ZhangSan"</span>, <span class="string">"1234"</span>);</div><div class="line"></div><div class="line">        console.log(zhang.getName()) //Employee name: ZhangSan;</div><div class="line"></div><div class="line">    Person类，就是组装好<span class="built_in">return</span>给我们的Class(局部函数) </div><div class="line">    new Person() 就完成了上面的继承顺序</div><div class="line">    子类和父类方法同名，子类里面this.super()能直接调用父类的方法</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git服务器代码自动部署]]></title>
      <url>http://cqblog.info/2016/07/01/git%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>每次本地代码都要手动上传到服务器在部署，对于懒人的我来说简直不能忍，于是折腾了下git自动化部署，期间踩了不少坑，记录一下防止下次遇到。</p>
<ul>
<li>服务器版本： ubantu 16.04</li>
<li>ipaddress：请填上自己服务器地址</li>
<li>每次操作都要输入密码，需要配置密钥认证，后期再来填坑</li>
<li>由于是个人项目，所以没有加入权限控制，后期填坑<a id="more"></a>
</li>
</ul>
<h1 id="服务器端准备工作"><a href="#服务器端准备工作" class="headerlink" title="服务器端准备工作"></a>服务器端准备工作</h1><ol>
<li><p>这些工作都在 <strong><em>root</em></strong> 或有管理权限的帐号下进行，下面以root为用户，切换到其他用户的时候会提示</p>
</li>
<li><p>确保安装了git</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install git</div></pre></td></tr></table></figure>
</li>
<li><p>为了安全起见，新建一个专门用于代码部署的无特权用户</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">useradd -m git </div><div class="line">passwd deployuser  <span class="comment">#设置该用户的密码，也可根据喜好配置成免密码登陆</span></div></pre></td></tr></table></figure>
</li>
<li><p>新建一个目录作为要部署代码的根目录，如：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#以我的项目为例</span></div><div class="line"><span class="built_in">cd</span> /</div><div class="line">mkdir /workspace/wechat</div></pre></td></tr></table></figure>
</li>
<li><p>将这个目录的属主和属组都改为上面新建的用户git</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /workspace</div><div class="line">chown -R git:git *</div></pre></td></tr></table></figure>
</li>
<li><p>切换到部署代码的专用用户</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su - git</div></pre></td></tr></table></figure>
</li>
<li><p>进入项目根目录，初始化为git仓库</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /workspace/wechat</div><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p><strong><em>重要配置</em></strong>让仓库接受代码提交</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git config receive.denyCurrentBranch ignore</div><div class="line">[可选]  git config core.worktree ~/www</div><div class="line">[可选]  git config --bool receive.denyNonFastForwards <span class="literal">false</span>  <span class="comment">#禁止强制推送</span></div><div class="line">    </div><div class="line">至此，一个空的git仓库就在服务器上建好了，仓库的地址为：</div><div class="line">git@ipaddress/workspace/wechat/.git</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="客户端准备"><a href="#客户端准备" class="headerlink" title="客户端准备"></a>客户端准备</h1><ol>
<li><p>通过<strong><em>git clone</em></strong>从远程仓库上将代码获取到本地</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@ipaddress:/workspace/webchat/.git</div><div class="line"><span class="comment">#执行以上命令后能看到本地多了个文件夹</span></div><div class="line"><span class="comment">#有可能会有以下警告，不用理会，这是因为服务端的仓库是空的</span></div><div class="line"><span class="comment">#warning: You appear to have cloned an empty repository.</span></div><div class="line"></div><div class="line">执行：git remote -v 会显示</div><div class="line">    origin  git@ipaddress:/workspace/wechat/.git (fetch)</div><div class="line">    origin  git@ipaddress:/workspace/wechat/.git (pubash)</div><div class="line">至此远程仓库已关联上</div></pre></td></tr></table></figure>
</li>
<li><p>在clone下来的webchat文件下创建一个文件如：a.txt</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在当前目录下打开gitbabash</span></div><div class="line">git add .</div><div class="line">git commit -m <span class="string">'test'</span></div><div class="line">git puorigin master</div><div class="line"><span class="comment">#显示如下，代表已经push到服务器仓库了</span></div><div class="line"><span class="comment">#Enter passphrase for key '/c/Users/asus-pc/.sbash/id_rsa':</span></div><div class="line"><span class="comment">#Counting objects: 3, done.</span></div><div class="line"><span class="comment">#Writing objects: 100% (3/3), 194 bytes | 0 bytes/s, done.</span></div><div class="line"><span class="comment">#Total 3 (delta 0), reused 0 (delta 0)</span></div><div class="line"><span class="comment">#To git@114.112.156.248:/workspace/wechat/.git</span></div><div class="line"><span class="comment"># * [new branch]      master -&gt; master</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="回到服务器端继续配置"><a href="#回到服务器端继续配置" class="headerlink" title="回到服务器端继续配置"></a>回到服务器端继续配置</h1><ol>
<li><p>更新服务端 git 仓库状态并检出文件(执行完以下命令后，将看到服务端仓库也有了a.txt)，这是手动更新，太麻烦了，第二步配置自动更新服务器端代码</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /workspace/wechat</div><div class="line">git update-server-info</div><div class="line">git checkout <span class="_">-f</span></div><div class="line"><span class="comment">#或者执行：</span></div><div class="line">git checkout branch_name     <span class="comment"># 如果pubash的不是master分支</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置服务器端更新钩子 <strong><em>post-update</em></strong></p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /workspace/wechat/.git/hooks</div><div class="line"><span class="comment">#新建 post-receive </span></div><div class="line">touch post-receive</div><div class="line">vim post-receive</div><div class="line"></div><div class="line"><span class="comment">#把以下内容复制进去保存</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"> <span class="built_in">unset</span> GIT_DIR</div><div class="line"> <span class="built_in">cd</span> ..</div><div class="line"> git checkout <span class="_">-f</span></div><div class="line"> </div><div class="line"> <span class="comment">#这一步很重要，要有写的权限</span></div><div class="line"> chmod a+x post-receive</div></pre></td></tr></table></figure>
</li>
<li><p>出于安全考虑，第二步创建的git用户不允许登录bashell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git:x:1001:1001:,,,:/home/git:/bin/babash</div><div class="line"><span class="comment">#修改为</span></div><div class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-bashell</div><div class="line"><span class="comment">#这样，git用户可以正常通过sbash使用git，但无法登录bashell</span></div></pre></td></tr></table></figure>
</li>
<li><p>继续本地新建文件，然后<code>git add .</code> <code>git commit -m &quot;注释&quot;</code> <code>git puorigin master</code>  去服务器上查看，服务器自动更新了我提交的内容，至此大功告成。   </p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多层json对象嵌套的扁平化与去扁平化]]></title>
      <url>http://cqblog.info/2016/06/29/javascript/</url>
      <content type="html"><![CDATA[<p>废话不多说，直接上代码<br><a id="more"></a><br>今天遇到一个问题，多重json嵌套，要扁平化，记实下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">//扁平化</div><div class="line">    JSON.flatten = <span class="keyword">function</span>(data) &#123;</div><div class="line">        var result = &#123;&#125;;</div><div class="line">        <span class="keyword">function</span> recurse(cur, prop) &#123;</div><div class="line">            <span class="keyword">if</span> (Object(cur) !== cur) &#123;</div><div class="line">                result[prop] = cur;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Array.isArray(cur)) &#123;</div><div class="line">                <span class="keyword">for</span> (var i = 0, l = cur.length; i &lt; l; i++)</div><div class="line">                    recurse(cur[i], prop + <span class="string">"["</span> + i + <span class="string">"]"</span>);</div><div class="line">                <span class="keyword">if</span> (l == 0)</div><div class="line">                    result[prop] = [];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                var isEmpty = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">for</span> (var p <span class="keyword">in</span> cur) &#123;</div><div class="line">                    isEmpty = <span class="literal">false</span>;</div><div class="line">                    recurse(cur[p], prop ? prop + <span class="string">"."</span> + p : p);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (isEmpty &amp;&amp; prop)</div><div class="line">                    result[prop] = &#123;&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        recurse(data, <span class="string">""</span>);</div><div class="line">        <span class="built_in">return</span> result;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    //去扁平化</div><div class="line">    JSON.unflatten = <span class="keyword">function</span>(data) &#123;</div><div class="line">        <span class="string">"use strict"</span>;</div><div class="line">        <span class="keyword">if</span> (Object(data) !== data || Array.isArray(data))</div><div class="line">            <span class="built_in">return</span> data;</div><div class="line">        var regex = /\.?([^.\[\]]+)|\[(\d+)\]/g,</div><div class="line">            resultholder = &#123;&#125;;</div><div class="line">        <span class="keyword">for</span> (var p <span class="keyword">in</span> data) &#123;</div><div class="line">            var cur = resultholder,</div><div class="line">                prop = <span class="string">""</span>,</div><div class="line">                m;</div><div class="line">            <span class="keyword">while</span> (m = regex.exec(p)) &#123;</div><div class="line">                cur = cur[prop] || (cur[prop] = (m[2] ? [] : &#123;&#125;));</div><div class="line">                prop = m[2] || m[1];</div><div class="line">            &#125;</div><div class="line">            cur[prop] = data[p];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> resultholder[<span class="string">""</span>] || resultholder;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>测试用例：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var xml = &#123;</div><div class="line">        ToUserName: [<span class="string">'阿斯顿'</span>],</div><div class="line">        FromUserName: [<span class="string">'啊实打实的'</span>],</div><div class="line">        CreateTime: [<span class="string">'hhhh123123123'</span>, &#123;<span class="string">"x"</span>: <span class="string">"aaa"</span>&#125;,[1, 2, 3, 4]],</div><div class="line">        MsgType: [<span class="string">'event'</span>],</div><div class="line">        Event: [<span class="string">'sdf '</span>],</div><div class="line">        EventKey: [<span class="string">''</span>],</div><div class="line">        xx: <span class="string">'xx'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>扁平化结果：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    CreateTime[0]: <span class="string">"hhhh123123123"</span>,</div><div class="line">    CreateTime[1].x: <span class="string">"aaa"</span>,</div><div class="line">    CreateTime[2][0]: 1,</div><div class="line">    CreateTime[2][1]: 2,</div><div class="line">    CreateTime[2][2]: 3,</div><div class="line">    CreateTime[2][3]: 4,</div><div class="line">    EventKey[0]: <span class="string">""</span>,</div><div class="line">    Event[0]: <span class="string">"sdf "</span>,</div><div class="line">    FromUserName[0]: <span class="string">"啊实打实的"</span>,</div><div class="line">    MsgType[0]: <span class="string">"event"</span>,</div><div class="line">    ToUserName[0]: <span class="string">"阿斯顿"</span>,</div><div class="line">    xx: <span class="string">"xx"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>正好能满足需求<br>使用   <strong>JSON.flatten</strong> 能还原去扁平化的值，不做演示。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs微信开发(一)]]></title>
      <url>http://cqblog.info/2016/06/29/wechat/</url>
      <content type="html"><![CDATA[<p>后期来填坑<br><a id="more"></a></p>
]]></content>
    </entry>
    
  
  
</search>
